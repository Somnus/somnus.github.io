## 建议
* 反编译工具：ildasm（官方）、ILSpy（推荐）。
* office操作：NPOI。
* 数据库操作：Dapper（轻量级，推荐）。
* 笔记记录：MarkdownPad（简洁、语法简单）。
* 数据抓取实现：所见网页数据无非静态加载与JS动态加载两个模式，先判断静态页面是否包含所需要数据，否则进行js判断。一般采用js加载的都是敏感数据，响应中必然存在与静态页面数据关联性。js判断针对大型网站和小型网站采取不同处理方式，小型网站代码结构简单，直接分析js源码，一般都是简单ajax请求，大型网站依次查看js请求，将响应数据与目标数据对比，从而找出数据加载来源。
* 数据抓包：Filder。可适用于浏览器、应用程序、手机软件等等。区别在于如果需要对手机上应用进行抓包需要将手机置于与相同网络环境下，通过设置代理即可实现对手机应用诸如app进行抓包。
* api调用：api调用分为前端调用和后端调用，后端调用 默认设置就好，可以通过固定appid和scret调用，前端考虑到敏感数据不能存在，可以考虑基于token的调用验证方式，即调用api之前需要获取凭证token，token单次使用后失效。基于前后端调用场景不同， 可以设置统一验证方式。
* api前端安全：除了调用凭证验证，还需要对请求域名进行管控，即一定不要设置为“*”，即使使用场景为。
* 分层思考：基于MVC架构的web应用程序开发实质上是很难做到前后端分离的，原因在于前后端直接采用的多种数据交互、razor语法等，一个比较可行的思路是基于api接口编程，前后端数据交互采用统一入口进行，方便进行管理，后端根据前端的数据需求着力于纯API逻辑处理而不用关心前端页面，而前端则将重心放在如何构建出更加用户体验上。这样做的好处在于：1.便于管理，摒弃复杂多样的前后端数据交互，面对异常能够更快找出bug；2.减少沟通成本。
* 功能模块化：这里的模块化并非指项目里的方法封装，而独立封装成为服务。考虑到这个点的缘故是在开发场景中存在一些基础模块的重复开发，比如登录、权限管理、支付等，既浪费人力，也不便于后期维护。实现思路是将这些基础模块独立封装，一旦需要直接通过api调用即可。
* 底层尝试：目前开发都是基于http的web应用程序开发，但其实也应该尝试了解tcp/ip、数据链路、物理层等基础，目前的智能中控系统就是例子之一。
* 数据库思考：这一点上主要考虑到数据库中存在功能重复性表，一个考虑的点就是对于通用表设计时应该尽可能考虑合理性与拓展性，保证能够适用于大量不同适用场景。
* js压缩：考虑到很多项目中前端核心功能都是通过js实现，对于涉及敏感数据的js进行压缩是有必要的，能够在一定程度上加大通过分析前端代码获取数据的难度。

## 项目
* 智能供料中控系统。目前完成登录权限管理部分开发，短信发送部分代码目前部署在阿里云正式服务器上，调用配置请查看web.config。源代码在源代码管理器ProductManageSevice文件夹里的ProductManageSevice。
* API接口开发。包含两部分，一部分是智能供料中控系统API，另一部分是小程序下单API。智能中控API完成统一下单、故障处理开发，数据可视化、具体调度等还未进行；小程序下单在发送下单成功消息方法还未完成，具体与晓勇沟通。
* 夏普净水器销售预测。源代码已放止源代码管理器，如果前端需要修改与叶馨沟通。
* 京东净水器评价数据抓取，代码已经防止源代码管理器。
所有源代码都已经放在源代码管理器的ProductManageSevice文件夹中。
